const express=require("express"),router=express.Router(),uuid=require("uuid/v4"),session=require("express-session"),bcrypt=require("bcrypt"),validator=require("validator"),user=require("./user.js"),MongoDBStore=require("connect-mongodb-session")(session),uri=process.env.MONGODB_URI,store=new MongoDBStore({uri:uri,databaseName:"schoolDB",collection:"sessionData"});router.use(session({genid:e=>uuid(),store:store,secret:"-G1jZuu+WkmC0",resave:!0,saveUninitialized:!0,rolling:!0,cookie:{maxAge:36e4}}));const saltRounds=10;router.get("/",(e,s)=>{e.session.username?s.redirect("/profile"):s.render("index.ejs")}),router.post("/register",async(e,s)=>{if(validator.isAlphanumeric(e.body.username)&&/^\S+@\S+\.\S+$/.test(e.body.email)){const r=await bcrypt.hash(e.body.password,10);await user.findOne({username:e.body.username.toLowerCase()},"username",function(o,i){i?s.render("failedregister.ejs"):(user.create({username:e.body.username.toLowerCase(),password:r,email:e.body.email.toLowerCase(),courses:["You haven't signed up for any courses yet!"]}),s.render("registered.ejs"))})}else s.render("failedregister.ejs")}),router.post("/login",(e,s)=>{(async r=>{await user.findOne({username:e.body.username.toLowerCase()},"username password email courses",function(r,o){r&&console.log(r),o&&bcrypt.compare(e.body.password,o.password)?(e.session.username=o.username,e.session.email=o.email,e.session.courses=o.courses,e.session.profileMessage="invisible",s.render("logged.ejs")):s.render("notlogged.ejs")})})(e.body)}),router.get("/logout",(e,s)=>{e.session.destroy(),s.render("loggedout.ejs")}),module.exports=router;